openapi: 3.0.2
info:
  title: Shop
  version: 1.0.0
components:
  securitySchemes:
    api_key:
      type: apiKey
      description: API key to authorize requests.
      name: api_key
      in: query
  schemas:
    User:
      type: object
      properties:
        id:
          type: integer
          format: int64
        email:
          type: string
        password:
          type: string
    Item:
      type: object
      properties:
        id:
          type: integer
          format: int64
        name:
          type: string
        description:
          type: string
        price:
          type: integer #чтобы не потерять точность, денежные поля мы будем передавать
          format: int64 #в виде целочисленного значения минимальной размерности валюты (например, центы или копейки)
        image_link:
          type: string
    Order:
      type: object
      properties:
        id:
          type: integer
          format: int64
          example: 10
        itemId:
          type: integer
          format: int64
          example: 198772
        quantity:
          type: integer
          format: int32
          example: 7
        shipDate:
          type: string
          format: date-time
        status:
          type: string
          description: Order Status
          enum:
            - placed
            - approved
            - paid
            - delivered
          example: approved
        complete:
          type: boolean
paths:
  /user:
    post:
      tags:
        - user
      summary: Create user
      description: This can only be done by the logged in user.
      operationId: createUser
      responses:
        default:
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/User'
        description: Created user object
  /user/login:
    post:
      tags:
      - user
      summary: User login
      operationId: loginUser
      parameters:
        - name: email
          in: query
          description: The user name for login
          required: true
          schema:
            type: string
        - name: password
          in: query
          description: The password for login in clear text
          required: true
          schema:
            type: string
      responses:
        '200':
          description: successful operation
          headers:
            X-Expires-After:
              description: date in UTC when token expires
              schema:
                type: string
                format: date-time
          content:
            application/json:
              schema:
                type: string
        '400':
          description: Invalid username/password supplied
          content: {}
  /user/logout:
    post:
      tags:
      - user
      summary: Logs out current logged in user session
      operationId: logoutUser
      responses:
        200:
          description: successful logout
          content: {}
  /items:
    post:
      tags:
      - item
      summary: Add a new item to the store
      operationId: CreateItem
      description: Item object that needs to be added to the store
      requestBody:
        required: true
        content:
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/Item'
      responses:
        '405':
          description: Invalid input
      security:
        - api_key: []
    get:
      tags:
      - item
      summary: Lists Items with filters
      operationId: ListItems
      parameters:
      - name: price_min
        in: query
        description: Lower price limit
        required: false
        schema:
          type: integer
          format: int64
      - name: price_max
        in: query
        description: Upper price limit
        required: false
        schema:
          type: integer
          format: int64
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Item'
        '400':
          description: Invalid price range
          content: {}
  /items/upload_image:
    post:
      tags:
      - item
      summary: Uploads an image
      operationId: uploadFile
      description: Additional data to pass to server
      requestBody:
        required: true
        content:
          multipart/form-data:
            schema:
              type: object
              properties:
                additionalMetadata:
                  type: string
                fileName:
                  description: "file to uploud"
                  type: string
                  format: binary
      parameters:
        - name: additionalMetadata
          in: query
          description: Additional data to pass to server
          required: true
          schema:
            type: string
        - name: file
          in: query
          description: file to upload
          required: true
          schema:
            type: string
      responses:
        '200':
          description: successful upload image
          content: {}
      security:
        - api_key: []
  '/items/{itemId}':
    get:
      tags:
      - item
      summary: Find item by ID
      operationId: GetItem
      parameters:
      - name: itemId
        in: path
        description: ID of item to return
        required: true
        schema:
          type: integer
          format: int64
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Item'
        '400':
          description: Invalid ID supplied
          content: {}
    put:
      tags:
      - item
      summary: Updates a item in the store with form data
      operationId: UpdateItem
      parameters:
      - name: itemId
        in: path
        description: ID of item that needs to be updated
        required: true
        schema:
          type: integer
          format: int64
      requestBody:
        content:
          application/json:
            schema:
              properties:
                name:
                  type: string
                  description: Updated name of the item
                status:
                  type: string
                  description: Updated status of the item
      responses:
        '405':
          description: Invalid input
          content: {}
      security:
        - api_key: []
    delete:
      tags:
      - item
      summary: Deletes a item
      operationId: DeleteItem
      parameters:
      - name: itemId
        in: path
        description: Item id to delete
        required: true
        schema:
          type: integer
          format: int64
      responses:
        '400':
          description: Invalid ID supplied
          content: {}
        '404':
          description: Item not found
          content: {}
      security:
        - api_key: []
  /order:
    post:
      tags:
      - store
      summary: Place an order for a item
      description: Place a new order in the store
      operationId: placeOrder
      x-swagger-router-controller: OrderController
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Order'
        '405':
          description: Invalid input
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Order'
  '/order/{orderId}':
    get:
      tags:
      - store
      summary: Find purchase order by ID
      description: Find purchase order by ID
      operationId: getOrderById
      parameters:
        - name: orderId
          in: path
          description: ID of order that needs to be fetched
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Order'
        '400':
          description: Invalid ID supplied
        '404':
          description: Order not found
    delete:
      tags:
        - store
      summary: Delete purchase order by ID
      description: Delete purchase order by ID
      operationId: deleteOrder
      parameters:
        - name: orderId
          in: path
          description: ID of the order that needs to be deleted
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '400':
          description: Invalid ID supplied
        '404':
          description: Order not found

security:
- api_key: []